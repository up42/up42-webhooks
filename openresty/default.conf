# -*- mode: nginx; mode: flyspell-prog;  ispell-local-dictionary: "american" -*-

### UP42 webhooks local development setup.

## For storing webhooks only allow POST requests.
map $request_method $not_allowed_method {
  POST 0;
  default 1;
}

## Path to the up42webhooks Lua module.
lua_package_path '$prefix/lua/?.lua;;';

## Define the shared dictionary where you will store the webhooks sent payloads.
lua_shared_dict received_webhooks 3m;

## Disable nginx/openresty version info.
server_tokens off;

## HTTP
server {
  listen 80;

  # Return a made up name for the server.
  header_filter_by_lua_block {
    ngx.header['server'] = 'LeRenard2000';
  }

  location / {
    root /usr/local/openresty/nginx/html;
    index index.html index.htm;
  }

  ## Get rid of the log polluting favicon.ico 404 error.
  location = /favicon.ico {
    root /usr/local/openresty/nginx/html;
    try_files /favicon.ico =204;
  }

  location /receive-webhooks {
    default_type application/json;

    ## Only POST is allowed here.
    if ($not_allowed_method) {
      return 405 '{"code": 405, "msg": "method not allowed"}';
    }

    # Store the received payload in the shared dict.
    content_by_lua_block {
      -- Get the custom Lua module we created.
      local m = require 'up42webhooks'
      ngx.say(m.set_key_value_webhook())
      ngx.exit(ngx.OK)
    }
  }

  ## List all webhooks that have been received and stored.
  location /dump-webhooks {
    default_type application/json;

    content_by_lua_block {
      local m = require 'up42webhooks'
      m.dump_webhooks()
      m.dump_cardinality()
      ngx.exit(ngx.OK)
    }
  }

  # Ping location to find out if the server is up and running.
  location ~* /ping {
    default_type text/plain;
    return 200 'PONG';
  }
}
